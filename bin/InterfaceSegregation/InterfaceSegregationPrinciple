Definition:
===========
1. This is the first principle that applies to interfaces instead of classes in SOLID.
2. This is similar to Single Responsibility Principle (S).
3. It states that "DO NOT FORCE ANY CLIENT TO IMPLEMENT AN INTERFACE WHICH IS IRRELEVANT TO THEM"
4. Here the main goal is to focus on avoiding "FAT" interfaces and give preference to smaller client specific interfaces.
5. You should prefer many client interfaces rather than one single general interface and each interface should have a specific responsibility (i.e., SRP)

Identification of violation of Interface Segregation Principle:
===============================================================
1. Fat Interfaces - Interfaces with high number of methods e.g., IMultiFunction interface that has several methods such as print, fax and scan.
2. Interfaces with low cohesion - Unrelated methods e.g., scan and fax in interfaces mean the interface has low cohesion.
3. Empty method implementations in implementation classes - Blank implementation of methods in the implementation classes is a violation of ISP.

Relation of ISP with SRP and Liskov Substitution Principle:
===========================================================
1. With client specific implementation of interfaces such as IFaxMachine, IPrinter, we are inadverently implementing the SRP i.e., high cohesion and interface having only a single reason to change.
2. We also follow Liskov Substitution principle as we can use the implementation classes i.e., child in places where the corresponding interfaces are being used.